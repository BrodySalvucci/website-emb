{"version":3,"file":"d10bf97b.js","sources":["../../src/Meta.tsx"],"sourcesContent":["import { useGlobalCloakSettings } from './Layout';\nimport { OBFUSCATE } from './consts';\nimport { getHot } from './routes';\nimport { Helmet } from 'react-helmet-async';\n\n// FAQ will be in english, at least in this repository.\n// Google is capable of translating the FAQ automatically\n\n// We provide metadata for public pages, although they aren't used in default open-source builds of Holy Unblocker.\n// This will allow us to have metadata on our official branch without bloating our branch and enable people to have same levels of SEO.\n\n// https://developers.google.com/search/docs/appearance/structured-data/qapage\n\nexport interface Answer {\n\ttext: string;\n}\n\nexport interface Question {\n\tacceptedAnswer: Answer;\n\tname: string;\n}\n\nexport interface FAQPage {\n\tmainEntity: Question[];\n}\n\n// https://developers.google.com/search/docs/appearance/structured-data/sitelinks-searchbox#structured-data-type-definitions\n\nexport interface Target {\n\turlTemplate: string;\n}\n\nexport interface SearchAction {\n\ttarget: Target;\n\t'query-input': string;\n}\n\nexport interface WebSite {\n\tpotentialAction: SearchAction[];\n\turl: string;\n}\n\nexport interface MetaProps {\n\ttitle: string;\n\tdescription?: string;\n\tfaq?: Question[];\n\tactions?: SearchAction[];\n}\n\nconst formatFAQ = (faq: FAQPage) =>\n\tJSON.stringify({\n\t\t'@context': 'https://schema.org',\n\t\t'@type': 'FAQPage',\n\t\tmainEntity: faq.mainEntity.map((question) => ({\n\t\t\t'@type': 'Question',\n\t\t\tname: question.name,\n\t\t\tacceptedAnswer: {\n\t\t\t\t'@type': 'Answer',\n\t\t\t\ttext: question.acceptedAnswer.text,\n\t\t\t},\n\t\t})),\n\t});\n\nconst formatWebSite = (ws: WebSite) =>\n\tJSON.stringify({\n\t\t'@context': 'https://schema.org',\n\t\t'@type': 'WebSite',\n\t\turl: ws.url,\n\t\tpotentialAction: ws.potentialAction.map((action) => ({\n\t\t\t'@type': 'SearchAction',\n\t\t\ttarget: {\n\t\t\t\t'@type': 'EntryPoint',\n\t\t\t\turlTemplate: action.target.urlTemplate,\n\t\t\t},\n\t\t\t'query-input': action['query-input'],\n\t\t})),\n\t});\n\n/**\n * Page metadata.\n */\nconst Meta = ({ title, description, faq, actions }: MetaProps) => {\n\tconst [cloak] = useGlobalCloakSettings();\n\n\treturn (\n\t\t<Helmet>\n\t\t\t<title>{cloak.title === '' ? title : cloak.title}</title>\n\t\t\t{!OBFUSCATE && description && (\n\t\t\t\t<meta name=\"description\" content={description} />\n\t\t\t)}\n\t\t\t{!OBFUSCATE && faq && (\n\t\t\t\t<script type=\"application/ld+json\">\n\t\t\t\t\t{formatFAQ({\n\t\t\t\t\t\tmainEntity: faq,\n\t\t\t\t\t})}\n\t\t\t\t</script>\n\t\t\t)}\n\t\t\t{!OBFUSCATE && actions && (\n\t\t\t\t<script type=\"application/ld+json\">\n\t\t\t\t\t{formatWebSite({\n\t\t\t\t\t\turl: new URL(\n\t\t\t\t\t\t\tgetHot('home').path,\n\t\t\t\t\t\t\tglobalThis.location.toString(),\n\t\t\t\t\t\t).toString(),\n\t\t\t\t\t\tpotentialAction: actions,\n\t\t\t\t\t})}\n\t\t\t\t</script>\n\t\t\t)}\n\t\t</Helmet>\n\t);\n};\n\nexport default Meta;\n"],"names":["Meta","title","description","faq","actions","cloak","useGlobalCloakSettings","Helmet","jsx","OBFUSCATE"],"mappings":"oEAiFA,MAAMA,EAAO,CAAC,CAAE,MAAAC,EAAO,YAAAC,EAAa,IAAAC,EAAK,QAAAC,KAAyB,CAC3D,KAAA,CAACC,CAAK,EAAIC,IAEhB,cACEC,EACA,CAAA,SAAA,CAAAC,MAAC,SAAO,SAAMH,EAAA,QAAU,GAAKJ,EAAQI,EAAM,MAAM,EAChD,CAACI,EAGD,CAACA,EAOD,CAACA,CAWH,CAAA,CAAA,CAEF"}