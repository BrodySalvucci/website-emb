{"version":3,"file":"d3d01167.js","sources":["../../src/isAbortError.ts","../../src/DatabaseAPI.ts"],"sourcesContent":["export const isError = (err: unknown): err is Error =>\n\ttypeof err === 'object' && err !== null && err instanceof Error;\n\nexport const isFailedToFetch = (err: unknown): err is Error =>\n\tisError(err) && err.message === 'Failed to fetch';\n\nconst isAbortError = (err: unknown): err is Error =>\n\tisError(err) && err.name === 'AbortError';\n\nexport default isAbortError;\n","import i18n from './i18n';\nimport { isError } from './isAbortError';\n\ntype i18nData = Record<string, string>;\n\nexport interface i18nRes {\n\ti18n: true;\n\tkey: string;\n\tdata: i18nData;\n}\n\ninterface JSONError<T = unknown> extends Error {\n\tstatusCode: number;\n\tjson: T;\n}\n\nexport const readi18nRes = (err: JSONError<i18nRes>) =>\n\t// @ts-ignore\n\ti18n.t(err.json.key, err.json.data);\n\nexport const isJSONError = (err: unknown): err is JSONError =>\n\tisError(err) && 'statusCode' in err && 'json' in err;\n\nexport const isi18nRes = (err: unknown): err is JSONError<i18nRes> =>\n\tisJSONError(err) &&\n\ttypeof err.json === 'object' &&\n\terr !== null &&\n\t'i18nError' in (err.json as object);\n\nexport default class DatabaseAPI {\n\tprivate server: string;\n\tprivate signal?: AbortSignal;\n\tconstructor(server: string, signal?: AbortSignal) {\n\t\tthis.server = server;\n\t\tthis.signal = signal;\n\t}\n\tprotected sortParams(\n\t\tparams: Record<string, unknown>,\n\t): Record<string, string> {\n\t\tconst result: Record<string, string> = {};\n\n\t\tfor (const param in params) {\n\t\t\tconst value = params[param];\n\n\t\t\tif (typeof value === 'string' || typeof value === 'number')\n\t\t\t\tresult[param] = value.toString();\n\t\t}\n\n\t\treturn result;\n\t}\n\tasync fetch<JSONData>(url: string, init: RequestInit = {}) {\n\t\tconst outgoing = await fetch(new URL(url, this.server), {\n\t\t\t...init,\n\t\t\tsignal: this.signal,\n\t\t});\n\n\t\tconst json = await outgoing.json();\n\n\t\tif (!outgoing.ok) {\n\t\t\tconst error: Partial<JSONError<unknown>> = new Error(\n\t\t\t\t('message' in json && (json as { message: string }).message) ||\n\t\t\t\t\toutgoing.statusText,\n\t\t\t);\n\t\t\terror.statusCode = outgoing.status;\n\t\t\terror.json = json;\n\t\t\tthrow error;\n\t\t}\n\n\t\treturn json as JSONData;\n\t}\n}\n"],"names":["isError","err","isFailedToFetch","isAbortError","DatabaseAPI","server","signal","__publicField","params","result","param","value","url","init","outgoing","json","error"],"mappings":"2MAAa,MAAAA,EAAWC,GACvB,OAAOA,GAAQ,UAAYA,IAAQ,MAAQA,aAAe,MAE9CC,EAAmBD,GAC/BD,EAAQC,CAAG,GAAKA,EAAI,UAAY,kBAE3BE,EAAgBF,GACrBD,EAAQC,CAAG,GAAKA,EAAI,OAAS,aCsB9B,MAAqBG,CAAY,CAGhC,YAAYC,EAAgBC,EAAsB,CAF1CC,EAAA,eACAA,EAAA,eAEP,KAAK,OAASF,EACd,KAAK,OAASC,CACf,CACU,WACTE,EACyB,CACzB,MAAMC,EAAiC,CAAA,EAEvC,UAAWC,KAASF,EAAQ,CACrB,MAAAG,EAAQH,EAAOE,CAAK,GAEtB,OAAOC,GAAU,UAAY,OAAOA,GAAU,YAC1CF,EAAAC,CAAK,EAAIC,EAAM,SAAS,EACjC,CAEO,OAAAF,CACR,CACA,MAAM,MAAgBG,EAAaC,EAAoB,GAAI,CACpD,MAAAC,EAAW,MAAM,MAAM,IAAI,IAAIF,EAAK,KAAK,MAAM,EAAG,CACvD,GAAGC,EACH,OAAQ,KAAK,MAAA,CACb,EAEKE,EAAO,MAAMD,EAAS,OAExB,GAAA,CAACA,EAAS,GAAI,CACjB,MAAME,EAAqC,IAAI,MAC7C,YAAaD,GAASA,EAA6B,SACnDD,EAAS,UAAA,EAEX,MAAAE,EAAM,WAAaF,EAAS,OAC5BE,EAAM,KAAOD,EACPC,CACP,CAEO,OAAAD,CACR,CACD"}